version: '3.4'

# https://docs.docker.com/compose/compose-file/#extension-fields
x-volumes:
  &default-volumes
  - $GCLOUD_LOCAL_DIR:/root/.config/gcloud
  # By default the credential location is under $GCLOUD_LOCAL_DIR/credentials. Unless it is customized, there is no need to use the next line.
  #- $GOOGLE_APPLICATION_CREDENTIALS_LOCAL_DIR:/root/.secret
  - $FILESTORE_LOCAL_DIR:/app/__filestore

services:

  backend:
    env_file: .env
    build:
      context: .
      dockerfile: alchemy.Dockerfile
    image: &img alchemy
    ports:
      - "5000:5000"
    volumes: *default-volumes
    environment:
      - FLASK_APP=backend
      - FLASK_ENV=development
      - FLASK_RUN_HOST=0.0.0.0
      - FLASK_RUN_PORT=5000
    command: [flask, run]
    depends_on:
      - redis
      - db

  frontend:
    env_file: .env
    image: *img
    ports:
      - "5001:5001"
    volumes: *default-volumes
    environment:
      - FLASK_APP=frontend
      - FLASK_ENV=development
      - FLASK_RUN_HOST=0.0.0.0
      - FLASK_RUN_PORT=5001
    command: [flask, run]
    depends_on:
      - redis
      - db
      - backend

  ar_celery:
    env_file: .env
    image: *img
    volumes: *default-volumes
    command: ["celery", "--app=ar.ar_celery", "worker", "-Q", "ar_celery", "-c", "2", "--autoscale=100,2", "-l", "info", "--max-tasks-per-child", "1", "-n", "ar_celery"]
    depends_on:
      - redis
      - db
      - backend

  train_celery:
    env_file: .env
    image: *img
    volumes: *default-volumes
    command: ["celery", "--app=train.train_celery", "worker", "-Q", "train_celery", "-c", "2", "--autoscale=100,2", "-l", "info", "--max-tasks-per-child", "1", "-n", "train_celery"]
    depends_on:
      - redis
      - db
      - backend

  gcp_celery:
    env_file: .env
    image: *img
    volumes: *default-volumes
    command: ["celery", "--app=train.gcp_celery", "worker", "-Q", "gcp_celery", "-c", "5", "--autoscale=100,2", "-l", "info", "-n", "gcp_celery"]
    depends_on:
      - redis
      - db
      - backend

  # TODO flower -- see if it works now
  # command=flower --port=5555 --broker=redis://localhost:6379/0
  
  redis:
    image: "redis:alpine"

  db:
    image: "postgres"
    volumes:
      - database-data:/var/lib/postgresql/data/
    environment:
        - POSTGRES_DB=$POSTGRES_DB
        - POSTGRES_USER=$POSTGRES_USER
        - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
    # To connect with the postgres server in docker, add your port forwarding
    # ports:
      # - "5432:5432"

volumes:
  database-data:
