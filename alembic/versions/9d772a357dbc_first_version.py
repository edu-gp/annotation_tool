"""First version

Revision ID: 9d772a357dbc
Revises: 
Create Date: 2020-05-01 20:42:42.462724

"""
import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision = "9d772a357dbc"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "classification_training_data",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("label", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_classification_training_data")),
    )
    with op.batch_alter_table("classification_training_data", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_classification_training_data_label"), ["label"], unique=False
        )

    op.create_table(
        "task",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.Column("default_params", sa.JSON(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_task")),
    )
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(length=64), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user")),
    )
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_user_username"), ["username"], unique=True)

    op.create_table(
        "annotation_request",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("entity", sa.String(), nullable=False),
        sa.Column("entity_type", sa.String(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("annotation_type", sa.Integer(), nullable=False),
        sa.Column("status", sa.Integer(), nullable=False),
        sa.Column("task_id", sa.Integer(), nullable=True),
        sa.Column("order", sa.Float(), nullable=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("context", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["task_id"], ["task.id"], name=op.f("fk_annotation_request_task_id_task")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name=op.f("fk_annotation_request_user_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_annotation_request")),
    )
    with op.batch_alter_table("annotation_request", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_annotation_request_entity"), ["entity"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_annotation_request_entity_type"),
            ["entity_type"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_annotation_request_label"), ["label"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_annotation_request_order"), ["order"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_annotation_request_status"), ["status"], unique=False
        )

    op.create_table(
        "classification_annotation",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("value", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("entity", sa.String(), nullable=False),
        sa.Column("entity_type", sa.String(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("context", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name=op.f("fk_classification_annotation_user_id_user"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_classification_annotation")),
    )
    with op.batch_alter_table("classification_annotation", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_classification_annotation_entity"), ["entity"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_classification_annotation_entity_type"),
            ["entity_type"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_classification_annotation_label"), ["label"], unique=False
        )

    op.create_table(
        "model",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("type", sa.String(length=64), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("uuid", sa.String(length=64), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("classification_training_data_id", sa.Integer(), nullable=True),
        sa.Column("config", sa.JSON(), nullable=True),
        sa.Column("task_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["classification_training_data_id"],
            ["classification_training_data.id"],
            name=op.f(
                "fk_model_classification_training_data_id_classification_training_data"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["task_id"], ["task.id"], name=op.f("fk_model_task_id_task")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_model")),
        sa.UniqueConstraint("uuid", "version", name="_uuid_version_uc"),
    )
    with op.batch_alter_table("model", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_model_type"), ["type"], unique=False)
        batch_op.create_index(batch_op.f("ix_model_uuid"), ["uuid"], unique=False)
        batch_op.create_index(batch_op.f("ix_model_version"), ["version"], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("model", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_model_version"))
        batch_op.drop_index(batch_op.f("ix_model_uuid"))
        batch_op.drop_index(batch_op.f("ix_model_type"))

    op.drop_table("model")
    with op.batch_alter_table("classification_annotation", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_classification_annotation_label"))
        batch_op.drop_index(batch_op.f("ix_classification_annotation_entity_type"))
        batch_op.drop_index(batch_op.f("ix_classification_annotation_entity"))

    op.drop_table("classification_annotation")
    with op.batch_alter_table("annotation_request", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_annotation_request_status"))
        batch_op.drop_index(batch_op.f("ix_annotation_request_order"))
        batch_op.drop_index(batch_op.f("ix_annotation_request_label"))
        batch_op.drop_index(batch_op.f("ix_annotation_request_entity_type"))
        batch_op.drop_index(batch_op.f("ix_annotation_request_entity"))

    op.drop_table("annotation_request")
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_user_username"))

    op.drop_table("user")
    op.drop_table("task")
    with op.batch_alter_table("classification_training_data", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_classification_training_data_label"))

    op.drop_table("classification_training_data")
    # ### end Alembic commands ###
