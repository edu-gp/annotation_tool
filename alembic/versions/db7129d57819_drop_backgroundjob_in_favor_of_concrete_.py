"""Drop BackgroundJob in favor of concrete tables

Revision ID: db7129d57819
Revises: b3796ff2df5a
Create Date: 2020-04-23 15:10:09.381610

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = 'db7129d57819'
down_revision = 'b3796ff2df5a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'model',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('type', sa.String(length=64), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True),
                  server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('params', sa.JSON(), nullable=False),
        sa.Column('output', sa.JSON(), nullable=False),
        sa.Column('task_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['task_id'], ['task.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('model', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_model_type'), [
                              'type'], unique=False)

    op.create_table(
        'classification_training_data',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text(
            '(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('label_id', sa.Integer(), nullable=False),
        sa.Column('output_filename', sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(['label_id'], ['label.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'file_inference',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text(
            '(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('model_id', sa.Integer(), nullable=False),
        sa.Column('input_filename', sa.Text(), nullable=False),
        sa.Column('output_filename', sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(['model_id'], ['model.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('file_inference', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_file_inference_input_filename'), [
                              'input_filename'], unique=False)

    with op.batch_alter_table('background_job', schema=None) as batch_op:
        batch_op.drop_index('ix_background_job_type')

    op.drop_table('background_job')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'background_job',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('type', sa.VARCHAR(length=64), nullable=False),
        sa.Column('params', sqlite.JSON(), nullable=False),
        sa.Column('output', sqlite.JSON(), nullable=False),
        sa.Column('status', sa.VARCHAR(length=64), nullable=False),
        sa.Column('created_at', sa.DATETIME(), server_default=sa.text(
            '(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('updated_at', sa.DATETIME(), nullable=True),
        sa.Column('task_id', sa.INTEGER(), nullable=True),
        sa.ForeignKeyConstraint(['task_id'], ['task.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('background_job', schema=None) as batch_op:
        batch_op.create_index('ix_background_job_type', ['type'], unique=False)

    with op.batch_alter_table('file_inference', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_file_inference_input_filename'))

    op.drop_table('file_inference')
    op.drop_table('classification_training_data')
    with op.batch_alter_table('model', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_model_type'))

    op.drop_table('model')
    # ### end Alembic commands ###
