import os
import time

import redis


# Don't use enum here because it's easier to serialize and compare strings.
class JobStatus:
    INIT = "INIT"
    QUEUED = "QUEUED"
    STARTED = "STARTED"
    DONE = "DONE"
    FAILED = "FAILED"


def get_redis():
    redis_url = os.getenv("CELERY_BROKER_URL", f"redis://localhost:6379/0")
    return redis.Redis.from_url(redis_url)


def create_status(celery_id, context_id, created_at=None):
    """Meant to be called from application.
    Inputs:
        celery_id: The uuid generated by Celery.
        context_id: An id from your application, e.g. "training:task-id-123"
        created_at: Timestamp

    Note: create_status may be called after set_status. To avoid a race
    condition, we should not assume `create_status` would be called before
    `set_status`, so the two functions set different keys.
    """
    if created_at is None:
        created_at = time.time()

    r = get_redis()
    r.set(f"cjs:{celery_id}:c", created_at)
    r.set(f"cjs:{celery_id}:x", context_id)
    r.sadd(f"cjss:{context_id}", celery_id)


def set_status(celery_id, state: str, progress=None, updated_at=None):
    """Meant to be called from Celery"""
    if updated_at is None:
        updated_at = time.time()

    r = get_redis()
    r.set(f"cjs:{celery_id}:s", state)
    r.set(f"cjs:{celery_id}:u", updated_at)

    if progress is not None and isinstance(progress, float):
        r.set(f"cjs:{celery_id}:p", progress)


def delete_status(celery_id, context_id):
    r = get_redis()
    r.delete(f"cjs:{celery_id}:s")
    r.delete(f"cjs:{celery_id}:p")
    r.delete(f"cjs:{celery_id}:c")
    r.delete(f"cjs:{celery_id}:u")
    r.delete(f"cjs:{celery_id}:x")
    r.srem(f"cjss:{context_id}", celery_id)


class CeleryJobStatus:
    """Only use this to view the job status, not to mutate it"""

    def __init__(
        self,
        celery_id: str,
        context_id: str,
        state: str,
        progress: float,
        created_at: float,
        updated_at: float,
    ):
        self.celery_id = celery_id
        self.context_id = context_id
        self.state = state
        self.progress = progress
        self.created_at = created_at
        self.updated_at = updated_at

    def __str__(self):
        if self.state == JobStatus.STARTED:
            return f"{self.state} - {100*self.progress:.2f}% complete"
        else:
            return str(self.state)

    def is_stale(self):
        now = time.time()

        if isinstance(self.created_at, float):
            if now - self.created_at > 60 * 60 * 5:  # 5 hours
                return True

        if isinstance(self.updated_at, float):
            if self.state == JobStatus.DONE and (now - self.updated_at > 10):
                return True

        return False

    @staticmethod
    def fetch_all_by_context_id(context_id):
        r = get_redis()
        res = []
        for celery_id in r.smembers(f"cjss:{context_id}"):
            celery_id = celery_id.decode()
            res.append(CeleryJobStatus.fetch_by_celery_id(celery_id))
        res = sorted(res, key=lambda cjs: cjs.created_at)
        return res

    @staticmethod
    def fetch_by_celery_id(celery_id):
        r = get_redis()

        _s = r.get(f"cjs:{celery_id}:s")
        _p = r.get(f"cjs:{celery_id}:p")
        _c = r.get(f"cjs:{celery_id}:c")
        _u = r.get(f"cjs:{celery_id}:u")
        _x = r.get(f"cjs:{celery_id}:x")

        now = time.time()

        context_id = _x.decode() if _x is not None else None

        if context_id is None:
            return None
        else:
            return CeleryJobStatus(
                celery_id,
                context_id=context_id,
                state=_s.decode() if _s is not None else JobStatus.INIT,
                progress=float(_p) if _p is not None else 0.0,
                created_at=float(_c) if _c is not None else now,
                updated_at=float(_u) if _u is not None else now,
            )
