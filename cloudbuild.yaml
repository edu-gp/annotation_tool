steps:
# Build the alchemy test image
#
- name: 'gcr.io/cloud-builders/docker'
  args: ['build',
         '--target', 'test',
         '--tag', 'gcr.io/$PROJECT_ID/alchemy:test-${SHORT_SHA}',
         '.']
  id: 'build-test-image'

# Run the tests, to prevent having broken
# images. May look unnecessary since there are
# GitHub actions that run tests, however it
# wouldn't hurt to double check.
#
- name: 'gcr.io/cloud-builders/docker'
  args: ['run',
         '--env', 'GOOGLE_AI_PLATFORM_ENABLED=0',
         '--env', 'USE_CLOUD_LOGGING=0',
         '--env', 'SECRET_KEY=blah',
         '--entrypoint', 'ci/run_tests.sh',
         'gcr.io/$PROJECT_ID/alchemy:test-${SHORT_SHA}']
  wait_for: ['build-test-image']
  id: 'run-tests'

# Build the target image (if target != test)
#
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: "bash"
  args:
    - "-c"
    - |
       if [ "${_TARGET}" != "test" ]; then
        docker build \
            --target ${_TARGET} \
            --cache-from gcr.io/$PROJECT_ID/alchemy:test-${SHORT_SHA} \
            --tag gcr.io/$PROJECT_ID/alchemy:${_TARGET}-${SHORT_SHA} \
            .
        else
          echo Skipped rebuilding the test image
        fi
  wait_for: ['run-tests']
  id: 'build-target-image'

# Tag the target as latest in case it is a production image
#
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: "bash"
  args:
    - "-c"
    - |
        if [ "${_TARGET}" = "production" ]; then
          echo Tagging production image as latest
          docker tag gcr.io/$PROJECT_ID/alchemy:${_TARGET}-${SHORT_SHA} gcr.io/$PROJECT_ID/alchemy:latest
          echo Pushing gcr.io/$PROJECT_ID/alchemy:latest
          docker push gcr.io/$PROJECT_ID/alchemy:latest
        else
          echo Not production target, not tagging as latest.
        fi
  id: 'tag-latest'
  wait_for: ['build-target-image']

# Deploy in production. This step can be skipped in case _NO_DEPLOY
# substitution is set (to anything).
#
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: "bash"
  args:
    - "-c"
    - |
      if [ "${_TARGET}" = "production" ] && [ -z ${_NO_DEPLOY} ]; then
        # INSTANCES=$(gcloud compute instances list --filter="${_DEPLOY_FILTER}")
        echo "Updating the project"
        gcloud compute ssh \
            --zone "us-central1-a" \
            --project "nlp-flywheel" \
            "${_DEPLOY_MACHINE}" -- " \
              cd /var/www
              git pull
              docker image prune -af
              docker pull gcr.io/nlp-flywheel/alchemy:latest && \
              docker-compose -f docker-compose-staging.yml down && \
              docker-compose -f docker-compose-staging.yml up -d && \
              docker images -f "dangling=true" -q | xargs docker rmi"
      else
        echo "Not going to deploy"
      fi
  id: 'update-server'
  wait_for: ['tag-latest']
timeout: 1200s
images:
  - 'gcr.io/$PROJECT_ID/alchemy:${_TARGET}-${SHORT_SHA}'
